
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000380  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b0  080004b8  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b0  080004b0  000014b8  2**0
                  CONTENTS
  4 .ARM          00000000  080004b0  080004b0  000014b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b0  080004b8  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b0  080004b0  000014b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004b4  080004b4  000014b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  080004b8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004b8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000549  00000000  00000000  000014e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000181  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000051  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff30  00000000  00000000  00001c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006ce  00000000  00000000  00011ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000545d8  00000000  00000000  00012277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006684f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000120  00000000  00000000  00066894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000669b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000498 	.word	0x08000498

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000498 	.word	0x08000498

08000170 <main>:
void enableADC (void);
void startADC(void);
void configDMA ();

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	configGPIO();
 8000174:	f000 f868 	bl	8000248 <configGPIO>
	configTimer3();
 8000178:	f000 f832 	bl	80001e0 <configTimer3>
	configADC();
 800017c:	f000 f89c 	bl	80002b8 <configADC>
	enableADC();
 8000180:	f000 f8e2 	bl	8000348 <enableADC>
	configDMA();
 8000184:	f000 f912 	bl	80003ac <configDMA>
	startADC();
 8000188:	f000 f8f8 	bl	800037c <startADC>

	while (1)
	{

		TIM3->CCR1 = adc_data[0] / 42;  // Ajusta o PWM para CH1
 800018c:	4b11      	ldr	r3, [pc, #68]	@ (80001d4 <main+0x64>)
 800018e:	881b      	ldrh	r3, [r3, #0]
 8000190:	b29b      	uxth	r3, r3
 8000192:	085b      	lsrs	r3, r3, #1
 8000194:	4a10      	ldr	r2, [pc, #64]	@ (80001d8 <main+0x68>)
 8000196:	fba2 2303 	umull	r2, r3, r2, r3
 800019a:	089b      	lsrs	r3, r3, #2
 800019c:	b29a      	uxth	r2, r3
 800019e:	4b0f      	ldr	r3, [pc, #60]	@ (80001dc <main+0x6c>)
 80001a0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = adc_data[1] / 42;  // Ajusta o PWM para CH2
 80001a2:	4b0c      	ldr	r3, [pc, #48]	@ (80001d4 <main+0x64>)
 80001a4:	885b      	ldrh	r3, [r3, #2]
 80001a6:	b29b      	uxth	r3, r3
 80001a8:	085b      	lsrs	r3, r3, #1
 80001aa:	4a0b      	ldr	r2, [pc, #44]	@ (80001d8 <main+0x68>)
 80001ac:	fba2 2303 	umull	r2, r3, r2, r3
 80001b0:	089b      	lsrs	r3, r3, #2
 80001b2:	b29a      	uxth	r2, r3
 80001b4:	4b09      	ldr	r3, [pc, #36]	@ (80001dc <main+0x6c>)
 80001b6:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR3 = adc_data[2] / 42;  // Ajusta o PWM para CH3
 80001b8:	4b06      	ldr	r3, [pc, #24]	@ (80001d4 <main+0x64>)
 80001ba:	889b      	ldrh	r3, [r3, #4]
 80001bc:	b29b      	uxth	r3, r3
 80001be:	085b      	lsrs	r3, r3, #1
 80001c0:	4a05      	ldr	r2, [pc, #20]	@ (80001d8 <main+0x68>)
 80001c2:	fba2 2303 	umull	r2, r3, r2, r3
 80001c6:	089b      	lsrs	r3, r3, #2
 80001c8:	b29a      	uxth	r2, r3
 80001ca:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <main+0x6c>)
 80001cc:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR1 = adc_data[0] / 42;  // Ajusta o PWM para CH1
 80001ce:	bf00      	nop
 80001d0:	e7dc      	b.n	800018c <main+0x1c>
 80001d2:	bf00      	nop
 80001d4:	2000001c 	.word	0x2000001c
 80001d8:	30c30c31 	.word	0x30c30c31
 80001dc:	40000400 	.word	0x40000400

080001e0 <configTimer3>:

	}
}

void configTimer3()
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	//Clock AFIO
	RCC->APB2ENR |= (1 << 0);
 80001e4:	4b15      	ldr	r3, [pc, #84]	@ (800023c <configTimer3+0x5c>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a14      	ldr	r2, [pc, #80]	@ (800023c <configTimer3+0x5c>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6193      	str	r3, [r2, #24]
	//CH1 - A6, CH2 - A7, CH3 - B0
	AFIO->MAPR &= (0x00 << 10);
 80001f0:	4b13      	ldr	r3, [pc, #76]	@ (8000240 <configTimer3+0x60>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	4b12      	ldr	r3, [pc, #72]	@ (8000240 <configTimer3+0x60>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	605a      	str	r2, [r3, #4]

	//clock TIMER3
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80001fa:	4b10      	ldr	r3, [pc, #64]	@ (800023c <configTimer3+0x5c>)
 80001fc:	69db      	ldr	r3, [r3, #28]
 80001fe:	4a0f      	ldr	r2, [pc, #60]	@ (800023c <configTimer3+0x5c>)
 8000200:	f043 0302 	orr.w	r3, r3, #2
 8000204:	61d3      	str	r3, [r2, #28]

	TIM3->PSC = 0;
 8000206:	4b0f      	ldr	r3, [pc, #60]	@ (8000244 <configTimer3+0x64>)
 8000208:	2200      	movs	r2, #0
 800020a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 100;
 800020c:	4b0d      	ldr	r3, [pc, #52]	@ (8000244 <configTimer3+0x64>)
 800020e:	2264      	movs	r2, #100	@ 0x64
 8000210:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM3->CCMR1 = 0x6060;
 8000212:	4b0c      	ldr	r3, [pc, #48]	@ (8000244 <configTimer3+0x64>)
 8000214:	f246 0260 	movw	r2, #24672	@ 0x6060
 8000218:	619a      	str	r2, [r3, #24]
	TIM3->CCMR2 = 0x0060;
 800021a:	4b0a      	ldr	r3, [pc, #40]	@ (8000244 <configTimer3+0x64>)
 800021c:	2260      	movs	r2, #96	@ 0x60
 800021e:	61da      	str	r2, [r3, #28]
	TIM3->CCER = 0x0111;
 8000220:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <configTimer3+0x64>)
 8000222:	f240 1211 	movw	r2, #273	@ 0x111
 8000226:	621a      	str	r2, [r3, #32]
	TIM3->CR1  |= (1 << 0);
 8000228:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <configTimer3+0x64>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a05      	ldr	r2, [pc, #20]	@ (8000244 <configTimer3+0x64>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	40021000 	.word	0x40021000
 8000240:	40010000 	.word	0x40010000
 8000244:	40000400 	.word	0x40000400

08000248 <configGPIO>:

void configGPIO()
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 2);
 800024c:	4b17      	ldr	r3, [pc, #92]	@ (80002ac <configGPIO+0x64>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a16      	ldr	r2, [pc, #88]	@ (80002ac <configGPIO+0x64>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 3);
 8000258:	4b14      	ldr	r3, [pc, #80]	@ (80002ac <configGPIO+0x64>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a13      	ldr	r2, [pc, #76]	@ (80002ac <configGPIO+0x64>)
 800025e:	f043 0308 	orr.w	r3, r3, #8
 8000262:	6193      	str	r3, [r2, #24]

	GPIOA->CRL &= 0xFFFFF000;
 8000264:	4b12      	ldr	r3, [pc, #72]	@ (80002b0 <configGPIO+0x68>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a11      	ldr	r2, [pc, #68]	@ (80002b0 <configGPIO+0x68>)
 800026a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800026e:	f023 030f 	bic.w	r3, r3, #15
 8000272:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= 0x00FFFFFF;
 8000274:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <configGPIO+0x68>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <configGPIO+0x68>)
 800027a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800027e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= 0xBB000000;
 8000280:	4b0b      	ldr	r3, [pc, #44]	@ (80002b0 <configGPIO+0x68>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0a      	ldr	r2, [pc, #40]	@ (80002b0 <configGPIO+0x68>)
 8000286:	f043 433b 	orr.w	r3, r3, #3137339392	@ 0xbb000000
 800028a:	6013      	str	r3, [r2, #0]

	GPIOB->CRL &= 0xFFFFFFF0;
 800028c:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <configGPIO+0x6c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a08      	ldr	r2, [pc, #32]	@ (80002b4 <configGPIO+0x6c>)
 8000292:	f023 030f 	bic.w	r3, r3, #15
 8000296:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x0000000B;
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <configGPIO+0x6c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a05      	ldr	r2, [pc, #20]	@ (80002b4 <configGPIO+0x6c>)
 800029e:	f043 030b 	orr.w	r3, r3, #11
 80002a2:	6013      	str	r3, [r2, #0]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	40021000 	.word	0x40021000
 80002b0:	40010800 	.word	0x40010800
 80002b4:	40010c00 	.word	0x40010c00

080002b8 <configADC>:

void configADC (void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 1<<9;  // enable ADC1 clock
 80002bc:	4b20      	ldr	r3, [pc, #128]	@ (8000340 <configADC+0x88>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000340 <configADC+0x88>)
 80002c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002c6:	6193      	str	r3, [r2, #24]

	ADC1->CR1 = (1<<8);    // SCAN mode enabled
 80002c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000344 <configADC+0x8c>)
 80002ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002ce:	605a      	str	r2, [r3, #4]

	ADC1->CR2 = (1<<1);     // enable continuous conversion mode
 80002d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000344 <configADC+0x8c>)
 80002d2:	2202      	movs	r2, #2
 80002d4:	609a      	str	r2, [r3, #8]

	ADC1->CR2 |= (7<<17);  // External Event selection pointed to SWSTART bit
 80002d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <configADC+0x8c>)
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	4a1a      	ldr	r2, [pc, #104]	@ (8000344 <configADC+0x8c>)
 80002dc:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 80002e0:	6093      	str	r3, [r2, #8]

	ADC1->CR2 &= ~(1<<11);   // Data Alignment RIGHT
 80002e2:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <configADC+0x8c>)
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	4a17      	ldr	r2, [pc, #92]	@ (8000344 <configADC+0x8c>)
 80002e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002ec:	6093      	str	r3, [r2, #8]

	ADC1->SMPR2 |= (7<<0) | (7<<3) | (7<<6);  // Sampling time of 239.5 cycles for channel 0, channel 1 and channel 2
 80002ee:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <configADC+0x8c>)
 80002f0:	691b      	ldr	r3, [r3, #16]
 80002f2:	4a14      	ldr	r2, [pc, #80]	@ (8000344 <configADC+0x8c>)
 80002f4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80002f8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 80002fc:	6113      	str	r3, [r2, #16]

	ADC1->SQR1 |= (2<<20);   // SQR1_L =2 for 3 conversions
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <configADC+0x8c>)
 8000300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000302:	4a10      	ldr	r2, [pc, #64]	@ (8000344 <configADC+0x8c>)
 8000304:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000308:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Enable DMA for ADC
	ADC1->CR2 |= (1<<8);
 800030a:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <configADC+0x8c>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a0d      	ldr	r2, [pc, #52]	@ (8000344 <configADC+0x8c>)
 8000310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000314:	6093      	str	r3, [r2, #8]

	// Channel Sequence
	ADC1->SQR3 |= (0<<0);
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <configADC+0x8c>)
 8000318:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <configADC+0x8c>)
 800031a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800031c:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= (1<<5);
 800031e:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <configADC+0x8c>)
 8000320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000322:	4a08      	ldr	r2, [pc, #32]	@ (8000344 <configADC+0x8c>)
 8000324:	f043 0320 	orr.w	r3, r3, #32
 8000328:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->SQR3 |= (2<<10);
 800032a:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <configADC+0x8c>)
 800032c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800032e:	4a05      	ldr	r2, [pc, #20]	@ (8000344 <configADC+0x8c>)
 8000330:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000334:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000
 8000344:	40012400 	.word	0x40012400

08000348 <enableADC>:


void enableADC (void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
	ADC1->CR2 |= 1<<0;   // ADON =1 enable ADC1
 800034e:	4b0a      	ldr	r3, [pc, #40]	@ (8000378 <enableADC+0x30>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	4a09      	ldr	r2, [pc, #36]	@ (8000378 <enableADC+0x30>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6093      	str	r3, [r2, #8]

	uint32_t delay = 10000;
 800035a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800035e:	607b      	str	r3, [r7, #4]
	while (delay--);
 8000360:	bf00      	nop
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	1e5a      	subs	r2, r3, #1
 8000366:	607a      	str	r2, [r7, #4]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d1fa      	bne.n	8000362 <enableADC+0x1a>
}
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40012400 	.word	0x40012400

0800037c <startADC>:

void startADC(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	ADC1->SR = 0;                      // Clear Status register
 8000380:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <startADC+0x2c>)
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
	ADC1->CR2 |= (1<<20);              // Conversion on external event enabled
 8000386:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <startADC+0x2c>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	4a07      	ldr	r2, [pc, #28]	@ (80003a8 <startADC+0x2c>)
 800038c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000390:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= 1<<22;                // Start conversion
 8000392:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <startADC+0x2c>)
 8000394:	689b      	ldr	r3, [r3, #8]
 8000396:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <startADC+0x2c>)
 8000398:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800039c:	6093      	str	r3, [r2, #8]
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40012400 	.word	0x40012400

080003ac <configDMA>:


void configDMA ()
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
		/*Configure DMA*/

		/*Enable Clock access to DMA1*/
		RCC->AHBENR|=RCC_AHBENR_DMA1EN;
 80003b0:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <configDMA+0x40>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a0d      	ldr	r2, [pc, #52]	@ (80003ec <configDMA+0x40>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6153      	str	r3, [r2, #20]

		/*DMA1_Channel1 is for ADC1*/

		DMA1_Channel1->CCR = 0x000005A0;
 80003bc:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <configDMA+0x44>)
 80003be:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80003c2:	601a      	str	r2, [r3, #0]

		DMA1_Channel1->CNDTR=3;
 80003c4:	4b0a      	ldr	r3, [pc, #40]	@ (80003f0 <configDMA+0x44>)
 80003c6:	2203      	movs	r2, #3
 80003c8:	605a      	str	r2, [r3, #4]

		DMA1_Channel1->CPAR=(uint32_t)(&ADC1->DR);
 80003ca:	4b09      	ldr	r3, [pc, #36]	@ (80003f0 <configDMA+0x44>)
 80003cc:	4a09      	ldr	r2, [pc, #36]	@ (80003f4 <configDMA+0x48>)
 80003ce:	609a      	str	r2, [r3, #8]

		DMA1_Channel1->CMAR=(uint32_t)(adc_data);
 80003d0:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <configDMA+0x44>)
 80003d2:	4a09      	ldr	r2, [pc, #36]	@ (80003f8 <configDMA+0x4c>)
 80003d4:	60da      	str	r2, [r3, #12]

		DMA1_Channel1->CCR|=DMA_CCR_EN;
 80003d6:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <configDMA+0x44>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a05      	ldr	r2, [pc, #20]	@ (80003f0 <configDMA+0x44>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6013      	str	r3, [r2, #0]
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40020008 	.word	0x40020008
 80003f4:	4001244c 	.word	0x4001244c
 80003f8:	2000001c 	.word	0x2000001c

080003fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003fc:	480d      	ldr	r0, [pc, #52]	@ (8000434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000400:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000404:	480c      	ldr	r0, [pc, #48]	@ (8000438 <LoopForever+0x6>)
  ldr r1, =_edata
 8000406:	490d      	ldr	r1, [pc, #52]	@ (800043c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000408:	4a0d      	ldr	r2, [pc, #52]	@ (8000440 <LoopForever+0xe>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800040c:	e002      	b.n	8000414 <LoopCopyDataInit>

0800040e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000412:	3304      	adds	r3, #4

08000414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000418:	d3f9      	bcc.n	800040e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041a:	4a0a      	ldr	r2, [pc, #40]	@ (8000444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800041c:	4c0a      	ldr	r4, [pc, #40]	@ (8000448 <LoopForever+0x16>)
  movs r3, #0
 800041e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000420:	e001      	b.n	8000426 <LoopFillZerobss>

08000422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000424:	3204      	adds	r2, #4

08000426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000428:	d3fb      	bcc.n	8000422 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800042a:	f000 f811 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042e:	f7ff fe9f 	bl	8000170 <main>

08000432 <LoopForever>:

LoopForever:
  b LoopForever
 8000432:	e7fe      	b.n	8000432 <LoopForever>
  ldr   r0, =_estack
 8000434:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800043c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000440:	080004b8 	.word	0x080004b8
  ldr r2, =_sbss
 8000444:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000448:	20000024 	.word	0x20000024

0800044c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800044c:	e7fe      	b.n	800044c <ADC1_2_IRQHandler>
	...

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	2600      	movs	r6, #0
 8000454:	4d0c      	ldr	r5, [pc, #48]	@ (8000488 <__libc_init_array+0x38>)
 8000456:	4c0d      	ldr	r4, [pc, #52]	@ (800048c <__libc_init_array+0x3c>)
 8000458:	1b64      	subs	r4, r4, r5
 800045a:	10a4      	asrs	r4, r4, #2
 800045c:	42a6      	cmp	r6, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	f000 f81a 	bl	8000498 <_init>
 8000464:	2600      	movs	r6, #0
 8000466:	4d0a      	ldr	r5, [pc, #40]	@ (8000490 <__libc_init_array+0x40>)
 8000468:	4c0a      	ldr	r4, [pc, #40]	@ (8000494 <__libc_init_array+0x44>)
 800046a:	1b64      	subs	r4, r4, r5
 800046c:	10a4      	asrs	r4, r4, #2
 800046e:	42a6      	cmp	r6, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f855 3b04 	ldr.w	r3, [r5], #4
 8000478:	4798      	blx	r3
 800047a:	3601      	adds	r6, #1
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000482:	4798      	blx	r3
 8000484:	3601      	adds	r6, #1
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b0 	.word	0x080004b0
 8000494:	080004b4 	.word	0x080004b4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
