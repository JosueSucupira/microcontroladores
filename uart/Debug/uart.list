
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007c8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008f8  080008f8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008f8  080008f8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080008f8  080008f8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008f8  080008f8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008f8  080008f8  000018f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008fc  080008fc  000018fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000900  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000004  08000904  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000904  00002040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000894  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000025f  00000000  00000000  000028c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00002b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000071  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff3c  00000000  00000000  00002c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000089a  00000000  00000000  00012b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000548fd  00000000  00000000  00013407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00067d04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b8  00000000  00000000  00067d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00067f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080008e0 	.word	0x080008e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080008e0 	.word	0x080008e0

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <main>:
void resetDemoMode();
void updateColorSequence();
void uart_write(char ch);

int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
    RCCEnable();
 80001ac:	f000 fa36 	bl	800061c <RCCEnable>
    GPIOConfig();
 80001b0:	f000 fa4e 	bl	8000650 <GPIOConfig>
    USART1Config();
 80001b4:	f000 fa06 	bl	80005c4 <USART1Config>
    Timer3Config();
 80001b8:	f000 faba 	bl	8000730 <Timer3Config>
    timer2Config();
 80001bc:	f000 fa82 	bl	80006c4 <timer2Config>

    while (1)
    {
        if (MAIN_SM)
 80001c0:	4b74      	ldr	r3, [pc, #464]	@ (8000394 <main+0x1ec>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <main+0x18>
        {
            MAIN_SM = 0;
 80001c8:	4b72      	ldr	r3, [pc, #456]	@ (8000394 <main+0x1ec>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	701a      	strb	r2, [r3, #0]
            if (demoMode)
 80001ce:	4b72      	ldr	r3, [pc, #456]	@ (8000398 <main+0x1f0>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d01c      	beq.n	8000210 <main+0x68>
            {
                if (command[0] == 'd' || command[0] == 'D')
 80001d6:	4b71      	ldr	r3, [pc, #452]	@ (800039c <main+0x1f4>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b64      	cmp	r3, #100	@ 0x64
 80001dc:	d003      	beq.n	80001e6 <main+0x3e>
 80001de:	4b6f      	ldr	r3, [pc, #444]	@ (800039c <main+0x1f4>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b44      	cmp	r3, #68	@ 0x44
 80001e4:	d1ec      	bne.n	80001c0 <main+0x18>
                {
                    resetDemoMode();
 80001e6:	f000 f8df 	bl	80003a8 <resetDemoMode>
                    TIM2->CR1 &= ~TIM_CR1_CEN;
 80001ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001f4:	f023 0301 	bic.w	r3, r3, #1
 80001f8:	6013      	str	r3, [r2, #0]
                    demoMode = !demoMode;
 80001fa:	4b67      	ldr	r3, [pc, #412]	@ (8000398 <main+0x1f0>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	bf0c      	ite	eq
 8000202:	2301      	moveq	r3, #1
 8000204:	2300      	movne	r3, #0
 8000206:	b2db      	uxtb	r3, r3
 8000208:	461a      	mov	r2, r3
 800020a:	4b63      	ldr	r3, [pc, #396]	@ (8000398 <main+0x1f0>)
 800020c:	701a      	strb	r2, [r3, #0]
 800020e:	e7d7      	b.n	80001c0 <main+0x18>
                }
            }
            else
            {
                switch (command[0])
 8000210:	4b62      	ldr	r3, [pc, #392]	@ (800039c <main+0x1f4>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	3b42      	subs	r3, #66	@ 0x42
 8000216:	2b30      	cmp	r3, #48	@ 0x30
 8000218:	d8d2      	bhi.n	80001c0 <main+0x18>
 800021a:	a201      	add	r2, pc, #4	@ (adr r2, 8000220 <main+0x78>)
 800021c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000220:	0800033d 	.word	0x0800033d
 8000224:	080001c1 	.word	0x080001c1
 8000228:	08000369 	.word	0x08000369
 800022c:	080001c1 	.word	0x080001c1
 8000230:	080001c1 	.word	0x080001c1
 8000234:	08000311 	.word	0x08000311
 8000238:	080001c1 	.word	0x080001c1
 800023c:	080001c1 	.word	0x080001c1
 8000240:	080001c1 	.word	0x080001c1
 8000244:	080001c1 	.word	0x080001c1
 8000248:	080001c1 	.word	0x080001c1
 800024c:	080001c1 	.word	0x080001c1
 8000250:	080001c1 	.word	0x080001c1
 8000254:	080001c1 	.word	0x080001c1
 8000258:	080001c1 	.word	0x080001c1
 800025c:	080001c1 	.word	0x080001c1
 8000260:	080002e5 	.word	0x080002e5
 8000264:	080001c1 	.word	0x080001c1
 8000268:	080001c1 	.word	0x080001c1
 800026c:	080001c1 	.word	0x080001c1
 8000270:	080001c1 	.word	0x080001c1
 8000274:	080001c1 	.word	0x080001c1
 8000278:	080001c1 	.word	0x080001c1
 800027c:	080001c1 	.word	0x080001c1
 8000280:	080001c1 	.word	0x080001c1
 8000284:	080001c1 	.word	0x080001c1
 8000288:	080001c1 	.word	0x080001c1
 800028c:	080001c1 	.word	0x080001c1
 8000290:	080001c1 	.word	0x080001c1
 8000294:	080001c1 	.word	0x080001c1
 8000298:	080001c1 	.word	0x080001c1
 800029c:	080001c1 	.word	0x080001c1
 80002a0:	0800033d 	.word	0x0800033d
 80002a4:	080001c1 	.word	0x080001c1
 80002a8:	08000369 	.word	0x08000369
 80002ac:	080001c1 	.word	0x080001c1
 80002b0:	080001c1 	.word	0x080001c1
 80002b4:	08000311 	.word	0x08000311
 80002b8:	080001c1 	.word	0x080001c1
 80002bc:	080001c1 	.word	0x080001c1
 80002c0:	080001c1 	.word	0x080001c1
 80002c4:	080001c1 	.word	0x080001c1
 80002c8:	080001c1 	.word	0x080001c1
 80002cc:	080001c1 	.word	0x080001c1
 80002d0:	080001c1 	.word	0x080001c1
 80002d4:	080001c1 	.word	0x080001c1
 80002d8:	080001c1 	.word	0x080001c1
 80002dc:	080001c1 	.word	0x080001c1
 80002e0:	080002e5 	.word	0x080002e5
                {
                case 'R':
                case 'r':
                    duty_cycle = (command[1] - '0') * 10 + (command[2] - '0');
 80002e4:	4b2d      	ldr	r3, [pc, #180]	@ (800039c <main+0x1f4>)
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	3b30      	subs	r3, #48	@ 0x30
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	461a      	mov	r2, r3
 80002ee:	0092      	lsls	r2, r2, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b29      	ldr	r3, [pc, #164]	@ (800039c <main+0x1f4>)
 80002f8:	789b      	ldrb	r3, [r3, #2]
 80002fa:	4413      	add	r3, r2
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	3b30      	subs	r3, #48	@ 0x30
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4b27      	ldr	r3, [pc, #156]	@ (80003a0 <main+0x1f8>)
 8000304:	701a      	strb	r2, [r3, #0]
                    TIM3->CCR1 = duty_cycle;
 8000306:	4b26      	ldr	r3, [pc, #152]	@ (80003a0 <main+0x1f8>)
 8000308:	781a      	ldrb	r2, [r3, #0]
 800030a:	4b26      	ldr	r3, [pc, #152]	@ (80003a4 <main+0x1fc>)
 800030c:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 800030e:	e03f      	b.n	8000390 <main+0x1e8>

                case 'G':
                case 'g':
                    duty_cycle = (command[1] - '0') * 10 + (command[2] - '0');
 8000310:	4b22      	ldr	r3, [pc, #136]	@ (800039c <main+0x1f4>)
 8000312:	785b      	ldrb	r3, [r3, #1]
 8000314:	3b30      	subs	r3, #48	@ 0x30
 8000316:	b2db      	uxtb	r3, r3
 8000318:	461a      	mov	r2, r3
 800031a:	0092      	lsls	r2, r2, #2
 800031c:	4413      	add	r3, r2
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b1e      	ldr	r3, [pc, #120]	@ (800039c <main+0x1f4>)
 8000324:	789b      	ldrb	r3, [r3, #2]
 8000326:	4413      	add	r3, r2
 8000328:	b2db      	uxtb	r3, r3
 800032a:	3b30      	subs	r3, #48	@ 0x30
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b1c      	ldr	r3, [pc, #112]	@ (80003a0 <main+0x1f8>)
 8000330:	701a      	strb	r2, [r3, #0]
                    TIM3->CCR2 = duty_cycle;
 8000332:	4b1b      	ldr	r3, [pc, #108]	@ (80003a0 <main+0x1f8>)
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	4b1b      	ldr	r3, [pc, #108]	@ (80003a4 <main+0x1fc>)
 8000338:	639a      	str	r2, [r3, #56]	@ 0x38
                    break;
 800033a:	e029      	b.n	8000390 <main+0x1e8>

                case 'B':
                case 'b':
                    duty_cycle = (command[1] - '0') * 10 + (command[2] - '0');
 800033c:	4b17      	ldr	r3, [pc, #92]	@ (800039c <main+0x1f4>)
 800033e:	785b      	ldrb	r3, [r3, #1]
 8000340:	3b30      	subs	r3, #48	@ 0x30
 8000342:	b2db      	uxtb	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	0092      	lsls	r2, r2, #2
 8000348:	4413      	add	r3, r2
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	b2da      	uxtb	r2, r3
 800034e:	4b13      	ldr	r3, [pc, #76]	@ (800039c <main+0x1f4>)
 8000350:	789b      	ldrb	r3, [r3, #2]
 8000352:	4413      	add	r3, r2
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3b30      	subs	r3, #48	@ 0x30
 8000358:	b2da      	uxtb	r2, r3
 800035a:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <main+0x1f8>)
 800035c:	701a      	strb	r2, [r3, #0]
                    TIM3->CCR3 = duty_cycle;
 800035e:	4b10      	ldr	r3, [pc, #64]	@ (80003a0 <main+0x1f8>)
 8000360:	781a      	ldrb	r2, [r3, #0]
 8000362:	4b10      	ldr	r3, [pc, #64]	@ (80003a4 <main+0x1fc>)
 8000364:	63da      	str	r2, [r3, #60]	@ 0x3c
                    break;
 8000366:	e013      	b.n	8000390 <main+0x1e8>
                case 'd':
                case 'D':
                    demoMode = !demoMode;
 8000368:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <main+0x1f0>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	bf0c      	ite	eq
 8000370:	2301      	moveq	r3, #1
 8000372:	2300      	movne	r3, #0
 8000374:	b2db      	uxtb	r3, r3
 8000376:	461a      	mov	r2, r3
 8000378:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <main+0x1f0>)
 800037a:	701a      	strb	r2, [r3, #0]
                    TIM2->CR1 |= TIM_CR1_CEN;
 800037c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	6013      	str	r3, [r2, #0]
                    break;
 800038c:	bf00      	nop
 800038e:	e717      	b.n	80001c0 <main+0x18>
        if (MAIN_SM)
 8000390:	e716      	b.n	80001c0 <main+0x18>
 8000392:	bf00      	nop
 8000394:	2000002a 	.word	0x2000002a
 8000398:	2000002c 	.word	0x2000002c
 800039c:	20000024 	.word	0x20000024
 80003a0:	2000002b 	.word	0x2000002b
 80003a4:	40000400 	.word	0x40000400

080003a8 <resetDemoMode>:
            }
        }
    }
}
void resetDemoMode()
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
    red = 0;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <resetDemoMode+0x44>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	801a      	strh	r2, [r3, #0]
    blue = 0;
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <resetDemoMode+0x48>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	801a      	strh	r2, [r3, #0]
    green = 0;
 80003b8:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <resetDemoMode+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	801a      	strh	r2, [r3, #0]
    colorIndex = 0;
 80003be:	4b0e      	ldr	r3, [pc, #56]	@ (80003f8 <resetDemoMode+0x50>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
    increasing = 1;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	@ (80003fc <resetDemoMode+0x54>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
    brightness = 0;
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <resetDemoMode+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	801a      	strh	r2, [r3, #0]
    TIM3->CCR1 = 0;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <resetDemoMode+0x5c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 0;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <resetDemoMode+0x5c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = 0;
 80003dc:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <resetDemoMode+0x5c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	2000002e 	.word	0x2000002e
 80003f0:	20000032 	.word	0x20000032
 80003f4:	20000030 	.word	0x20000030
 80003f8:	20000034 	.word	0x20000034
 80003fc:	20000000 	.word	0x20000000
 8000400:	20000036 	.word	0x20000036
 8000404:	40000400 	.word	0x40000400

08000408 <updateColorSequence>:
void updateColorSequence()
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
    // Controla o ciclo de aumento e diminuição de PWM
    static uint8_t step = 1;

    if (increasing)
 800040c:	4b59      	ldr	r3, [pc, #356]	@ (8000574 <updateColorSequence+0x16c>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d010      	beq.n	8000438 <updateColorSequence+0x30>
    {
        brightness += step;
 8000416:	4b58      	ldr	r3, [pc, #352]	@ (8000578 <updateColorSequence+0x170>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	461a      	mov	r2, r3
 800041c:	4b57      	ldr	r3, [pc, #348]	@ (800057c <updateColorSequence+0x174>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4413      	add	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b55      	ldr	r3, [pc, #340]	@ (800057c <updateColorSequence+0x174>)
 8000426:	801a      	strh	r2, [r3, #0]
        if (brightness >= 100)
 8000428:	4b54      	ldr	r3, [pc, #336]	@ (800057c <updateColorSequence+0x174>)
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	2b63      	cmp	r3, #99	@ 0x63
 800042e:	d924      	bls.n	800047a <updateColorSequence+0x72>
            increasing = 0;
 8000430:	4b50      	ldr	r3, [pc, #320]	@ (8000574 <updateColorSequence+0x16c>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
 8000436:	e020      	b.n	800047a <updateColorSequence+0x72>
    }
    else
    {
        brightness -= step;
 8000438:	4b50      	ldr	r3, [pc, #320]	@ (800057c <updateColorSequence+0x174>)
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	4a4e      	ldr	r2, [pc, #312]	@ (8000578 <updateColorSequence+0x170>)
 800043e:	7812      	ldrb	r2, [r2, #0]
 8000440:	1a9b      	subs	r3, r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b4d      	ldr	r3, [pc, #308]	@ (800057c <updateColorSequence+0x174>)
 8000446:	801a      	strh	r2, [r3, #0]
        if (brightness == 0)
 8000448:	4b4c      	ldr	r3, [pc, #304]	@ (800057c <updateColorSequence+0x174>)
 800044a:	881b      	ldrh	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d114      	bne.n	800047a <updateColorSequence+0x72>
        {
            increasing = 1;
 8000450:	4b48      	ldr	r3, [pc, #288]	@ (8000574 <updateColorSequence+0x16c>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
            colorIndex = (colorIndex + 1) % 7; // Avança para a próxima cor
 8000456:	4b4a      	ldr	r3, [pc, #296]	@ (8000580 <updateColorSequence+0x178>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	1c5a      	adds	r2, r3, #1
 800045e:	4b49      	ldr	r3, [pc, #292]	@ (8000584 <updateColorSequence+0x17c>)
 8000460:	fb83 1302 	smull	r1, r3, r3, r2
 8000464:	4413      	add	r3, r2
 8000466:	1099      	asrs	r1, r3, #2
 8000468:	17d3      	asrs	r3, r2, #31
 800046a:	1ac9      	subs	r1, r1, r3
 800046c:	460b      	mov	r3, r1
 800046e:	00db      	lsls	r3, r3, #3
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	1ad1      	subs	r1, r2, r3
 8000474:	b2ca      	uxtb	r2, r1
 8000476:	4b42      	ldr	r3, [pc, #264]	@ (8000580 <updateColorSequence+0x178>)
 8000478:	701a      	strb	r2, [r3, #0]
        }
    }

    // Define a cor com base no colorIndex
    switch (colorIndex)
 800047a:	4b41      	ldr	r3, [pc, #260]	@ (8000580 <updateColorSequence+0x178>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2b06      	cmp	r3, #6
 8000482:	d863      	bhi.n	800054c <updateColorSequence+0x144>
 8000484:	a201      	add	r2, pc, #4	@ (adr r2, 800048c <updateColorSequence+0x84>)
 8000486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800048a:	bf00      	nop
 800048c:	080004a9 	.word	0x080004a9
 8000490:	080004bf 	.word	0x080004bf
 8000494:	080004d5 	.word	0x080004d5
 8000498:	080004eb 	.word	0x080004eb
 800049c:	08000503 	.word	0x08000503
 80004a0:	0800051b 	.word	0x0800051b
 80004a4:	08000533 	.word	0x08000533
    {
    case 0: // Vermelho
        red = brightness;
 80004a8:	4b34      	ldr	r3, [pc, #208]	@ (800057c <updateColorSequence+0x174>)
 80004aa:	881a      	ldrh	r2, [r3, #0]
 80004ac:	4b36      	ldr	r3, [pc, #216]	@ (8000588 <updateColorSequence+0x180>)
 80004ae:	801a      	strh	r2, [r3, #0]
        green = 0;
 80004b0:	4b36      	ldr	r3, [pc, #216]	@ (800058c <updateColorSequence+0x184>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	801a      	strh	r2, [r3, #0]
        blue = 0;
 80004b6:	4b36      	ldr	r3, [pc, #216]	@ (8000590 <updateColorSequence+0x188>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	801a      	strh	r2, [r3, #0]
        break;
 80004bc:	e046      	b.n	800054c <updateColorSequence+0x144>
    case 1: // Verde
        red = 0;
 80004be:	4b32      	ldr	r3, [pc, #200]	@ (8000588 <updateColorSequence+0x180>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	801a      	strh	r2, [r3, #0]
        green = brightness;
 80004c4:	4b2d      	ldr	r3, [pc, #180]	@ (800057c <updateColorSequence+0x174>)
 80004c6:	881a      	ldrh	r2, [r3, #0]
 80004c8:	4b30      	ldr	r3, [pc, #192]	@ (800058c <updateColorSequence+0x184>)
 80004ca:	801a      	strh	r2, [r3, #0]
        blue = 0;
 80004cc:	4b30      	ldr	r3, [pc, #192]	@ (8000590 <updateColorSequence+0x188>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	801a      	strh	r2, [r3, #0]
        break;
 80004d2:	e03b      	b.n	800054c <updateColorSequence+0x144>
    case 2: // Azul
        red = 0;
 80004d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000588 <updateColorSequence+0x180>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	801a      	strh	r2, [r3, #0]
        green = 0;
 80004da:	4b2c      	ldr	r3, [pc, #176]	@ (800058c <updateColorSequence+0x184>)
 80004dc:	2200      	movs	r2, #0
 80004de:	801a      	strh	r2, [r3, #0]
        blue = brightness;
 80004e0:	4b26      	ldr	r3, [pc, #152]	@ (800057c <updateColorSequence+0x174>)
 80004e2:	881a      	ldrh	r2, [r3, #0]
 80004e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000590 <updateColorSequence+0x188>)
 80004e6:	801a      	strh	r2, [r3, #0]
        break;
 80004e8:	e030      	b.n	800054c <updateColorSequence+0x144>
    case 3: // Amarelo
        red = brightness;
 80004ea:	4b24      	ldr	r3, [pc, #144]	@ (800057c <updateColorSequence+0x174>)
 80004ec:	881a      	ldrh	r2, [r3, #0]
 80004ee:	4b26      	ldr	r3, [pc, #152]	@ (8000588 <updateColorSequence+0x180>)
 80004f0:	801a      	strh	r2, [r3, #0]
        green = brightness;
 80004f2:	4b22      	ldr	r3, [pc, #136]	@ (800057c <updateColorSequence+0x174>)
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	4b25      	ldr	r3, [pc, #148]	@ (800058c <updateColorSequence+0x184>)
 80004f8:	801a      	strh	r2, [r3, #0]
        blue = 0;
 80004fa:	4b25      	ldr	r3, [pc, #148]	@ (8000590 <updateColorSequence+0x188>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	801a      	strh	r2, [r3, #0]
        break;
 8000500:	e024      	b.n	800054c <updateColorSequence+0x144>
    case 4: // Ciano
        red = 0;
 8000502:	4b21      	ldr	r3, [pc, #132]	@ (8000588 <updateColorSequence+0x180>)
 8000504:	2200      	movs	r2, #0
 8000506:	801a      	strh	r2, [r3, #0]
        green = brightness;
 8000508:	4b1c      	ldr	r3, [pc, #112]	@ (800057c <updateColorSequence+0x174>)
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <updateColorSequence+0x184>)
 800050e:	801a      	strh	r2, [r3, #0]
        blue = brightness;
 8000510:	4b1a      	ldr	r3, [pc, #104]	@ (800057c <updateColorSequence+0x174>)
 8000512:	881a      	ldrh	r2, [r3, #0]
 8000514:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <updateColorSequence+0x188>)
 8000516:	801a      	strh	r2, [r3, #0]
        break;
 8000518:	e018      	b.n	800054c <updateColorSequence+0x144>
    case 5: // Roxo
        red = brightness;
 800051a:	4b18      	ldr	r3, [pc, #96]	@ (800057c <updateColorSequence+0x174>)
 800051c:	881a      	ldrh	r2, [r3, #0]
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <updateColorSequence+0x180>)
 8000520:	801a      	strh	r2, [r3, #0]
        green = 0;
 8000522:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <updateColorSequence+0x184>)
 8000524:	2200      	movs	r2, #0
 8000526:	801a      	strh	r2, [r3, #0]
        blue = brightness;
 8000528:	4b14      	ldr	r3, [pc, #80]	@ (800057c <updateColorSequence+0x174>)
 800052a:	881a      	ldrh	r2, [r3, #0]
 800052c:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <updateColorSequence+0x188>)
 800052e:	801a      	strh	r2, [r3, #0]
        break;
 8000530:	e00c      	b.n	800054c <updateColorSequence+0x144>
    case 6: // Branco
        red = brightness;
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <updateColorSequence+0x174>)
 8000534:	881a      	ldrh	r2, [r3, #0]
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <updateColorSequence+0x180>)
 8000538:	801a      	strh	r2, [r3, #0]
        green = brightness;
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <updateColorSequence+0x174>)
 800053c:	881a      	ldrh	r2, [r3, #0]
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <updateColorSequence+0x184>)
 8000540:	801a      	strh	r2, [r3, #0]
        blue = brightness;
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <updateColorSequence+0x174>)
 8000544:	881a      	ldrh	r2, [r3, #0]
 8000546:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <updateColorSequence+0x188>)
 8000548:	801a      	strh	r2, [r3, #0]
        break;
 800054a:	bf00      	nop
    }

    // Atualiza os valores de PWM
    TIM3->CCR1 = red;   // Canal 1 - Vermelho
 800054c:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <updateColorSequence+0x180>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	b29a      	uxth	r2, r3
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <updateColorSequence+0x18c>)
 8000554:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = green; // Canal 2 - Verde
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <updateColorSequence+0x184>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <updateColorSequence+0x18c>)
 800055e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3->CCR3 = blue;  // Canal 3 - Azul
 8000560:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <updateColorSequence+0x188>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b29a      	uxth	r2, r3
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <updateColorSequence+0x18c>)
 8000568:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000000 	.word	0x20000000
 8000578:	20000001 	.word	0x20000001
 800057c:	20000036 	.word	0x20000036
 8000580:	20000034 	.word	0x20000034
 8000584:	92492493 	.word	0x92492493
 8000588:	2000002e 	.word	0x2000002e
 800058c:	20000030 	.word	0x20000030
 8000590:	20000032 	.word	0x20000032
 8000594:	40000400 	.word	0x40000400

08000598 <uart_write>:

void uart_write(char ch)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
    {
        // Make sure the transmit data register is empty
        while (!(USART1->SR & USART_SR_TXE))
 80005a2:	bf00      	nop
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <uart_write+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0f9      	beq.n	80005a4 <uart_write+0xc>
        {
        }
        // Write to transmit data register
        USART1->DR = (ch & 0xFF);
 80005b0:	4a03      	ldr	r2, [pc, #12]	@ (80005c0 <uart_write+0x28>)
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	6053      	str	r3, [r2, #4]
    }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40013800 	.word	0x40013800

080005c4 <USART1Config>:

void USART1Config()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    // enable clock access to USART1
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <USART1Config+0x50>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a11      	ldr	r2, [pc, #68]	@ (8000614 <USART1Config+0x50>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6193      	str	r3, [r2, #24]
    // Enable receiver
    USART1->CR1 |= USART_CR1_RE;
 80005d4:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <USART1Config+0x54>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000618 <USART1Config+0x54>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	60d3      	str	r3, [r2, #12]
    // Transmit Enable
    USART1->CR1 |= USART_CR1_TE;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <USART1Config+0x54>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <USART1Config+0x54>)
 80005e6:	f043 0308 	orr.w	r3, r3, #8
 80005ea:	60d3      	str	r3, [r2, #12]
    // Set Baud Rate
    USART1->BRR = ((CPU_CLK + (BaudRate / 2U)) / BaudRate);
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <USART1Config+0x54>)
 80005ee:	2245      	movs	r2, #69	@ 0x45
 80005f0:	609a      	str	r2, [r3, #8]
    // Enable RXNIE interrupt
    USART1->CR1 |= USART_CR1_RXNEIE;
 80005f2:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <USART1Config+0x54>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	4a08      	ldr	r2, [pc, #32]	@ (8000618 <USART1Config+0x54>)
 80005f8:	f043 0320 	orr.w	r3, r3, #32
 80005fc:	60d3      	str	r3, [r2, #12]
    // Enable USART1 interrupt in NVIC
    NVIC_EnableIRQ(USART1_IRQn);
 80005fe:	2025      	movs	r0, #37	@ 0x25
 8000600:	f7ff fdb6 	bl	8000170 <__NVIC_EnableIRQ>
    // Enable UART
    USART1->CR1 |= USART_CR1_UE;
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <USART1Config+0x54>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4a03      	ldr	r2, [pc, #12]	@ (8000618 <USART1Config+0x54>)
 800060a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800060e:	60d3      	str	r3, [r2, #12]
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	40013800 	.word	0x40013800

0800061c <RCCEnable>:

void RCCEnable()
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
    // enable clock GPIOA, GPIOB
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <RCCEnable+0x30>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a09      	ldr	r2, [pc, #36]	@ (800064c <RCCEnable+0x30>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800062c:	4b07      	ldr	r3, [pc, #28]	@ (800064c <RCCEnable+0x30>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a06      	ldr	r2, [pc, #24]	@ (800064c <RCCEnable+0x30>)
 8000632:	f043 0308 	orr.w	r3, r3, #8
 8000636:	6193      	str	r3, [r2, #24]

    // enable clock USART1
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000638:	4b04      	ldr	r3, [pc, #16]	@ (800064c <RCCEnable+0x30>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a03      	ldr	r2, [pc, #12]	@ (800064c <RCCEnable+0x30>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000642:	6193      	str	r3, [r2, #24]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	40021000 	.word	0x40021000

08000650 <GPIOConfig>:
void GPIOConfig()
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
    // Configure PA9(TX)
    GPIOA->CRH &= 0xFFFFFF0F;
 8000654:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <GPIOConfig+0x6c>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4a18      	ldr	r2, [pc, #96]	@ (80006bc <GPIOConfig+0x6c>)
 800065a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800065e:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= 0x000000B0;
 8000660:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <GPIOConfig+0x6c>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	4a15      	ldr	r2, [pc, #84]	@ (80006bc <GPIOConfig+0x6c>)
 8000666:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800066a:	6053      	str	r3, [r2, #4]
    // Configure PA10(RX)
    GPIOA->CRH &= 0xFFFFF0FF;
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <GPIOConfig+0x6c>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <GPIOConfig+0x6c>)
 8000672:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000676:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= 0x00000400;
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <GPIOConfig+0x6c>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a0f      	ldr	r2, [pc, #60]	@ (80006bc <GPIOConfig+0x6c>)
 800067e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000682:	6053      	str	r3, [r2, #4]

    // PA6, PA7, PB0 - PWM
    GPIOA->CRL &= 0x00FFFFFF;
 8000684:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <GPIOConfig+0x6c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0c      	ldr	r2, [pc, #48]	@ (80006bc <GPIOConfig+0x6c>)
 800068a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800068e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= 0xBB000000;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <GPIOConfig+0x6c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a09      	ldr	r2, [pc, #36]	@ (80006bc <GPIOConfig+0x6c>)
 8000696:	f043 433b 	orr.w	r3, r3, #3137339392	@ 0xbb000000
 800069a:	6013      	str	r3, [r2, #0]
    GPIOB->CRL &= 0xFFFFFFF0;
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <GPIOConfig+0x70>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a07      	ldr	r2, [pc, #28]	@ (80006c0 <GPIOConfig+0x70>)
 80006a2:	f023 030f 	bic.w	r3, r3, #15
 80006a6:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= 0x0000000B;
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <GPIOConfig+0x70>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <GPIOConfig+0x70>)
 80006ae:	f043 030b 	orr.w	r3, r3, #11
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00

080006c4 <timer2Config>:

void timer2Config()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
    // Habilita o clock para o TIM3
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <timer2Config+0x3c>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000700 <timer2Config+0x3c>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	61d3      	str	r3, [r2, #28]

    // Configura o prescaler e o valor de auto-reload
    TIM2->PSC = 8000 - 1;
 80006d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006d8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80006dc:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 20 - 1; // 20ms
 80006de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006e2:	2213      	movs	r2, #19
 80006e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Habilita a interrupção de atualização do TIM3
    TIM2->DIER |= TIM_DIER_UIE;
 80006e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 80006f6:	201c      	movs	r0, #28
 80006f8:	f7ff fd3a 	bl	8000170 <__NVIC_EnableIRQ>

    // Ativa o timer
    // TIM2->CR1 |= TIM_CR1_CEN;
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000

08000704 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 8000708:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800070c:	691b      	ldr	r3, [r3, #16]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d009      	beq.n	800072a <TIM2_IRQHandler+0x26>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Limpa a flag de interrupção
 8000716:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000720:	f023 0301 	bic.w	r3, r3, #1
 8000724:	6113      	str	r3, [r2, #16]
        updateColorSequence();
 8000726:	f7ff fe6f 	bl	8000408 <updateColorSequence>
    }
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <Timer3Config>:

void Timer3Config()
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
    // Clock AFIO
    RCC->APB2ENR |= (1 << 0);
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <Timer3Config+0x5c>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a14      	ldr	r2, [pc, #80]	@ (800078c <Timer3Config+0x5c>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6193      	str	r3, [r2, #24]
    // CH1 - A6, CH2 - A7, CH3 - B0
    AFIO->MAPR &= (0x00 << 10);
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <Timer3Config+0x60>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <Timer3Config+0x60>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]

    // clock TIMER3
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <Timer3Config+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0f      	ldr	r2, [pc, #60]	@ (800078c <Timer3Config+0x5c>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	61d3      	str	r3, [r2, #28]

    TIM3->PSC = 0;
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <Timer3Config+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 100;
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <Timer3Config+0x64>)
 800075e:	2264      	movs	r2, #100	@ 0x64
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM3->CCMR1 = 0x6060;
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <Timer3Config+0x64>)
 8000764:	f246 0260 	movw	r2, #24672	@ 0x6060
 8000768:	619a      	str	r2, [r3, #24]
    TIM3->CCMR2 = 0x0060;
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <Timer3Config+0x64>)
 800076c:	2260      	movs	r2, #96	@ 0x60
 800076e:	61da      	str	r2, [r3, #28]
    TIM3->CCER = 0x0111;
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <Timer3Config+0x64>)
 8000772:	f240 1211 	movw	r2, #273	@ 0x111
 8000776:	621a      	str	r2, [r3, #32]
    TIM3->CR1 |= (1 << 0);
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <Timer3Config+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <Timer3Config+0x64>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000
 8000790:	40010000 	.word	0x40010000
 8000794:	40000400 	.word	0x40000400

08000798 <USART1_IRQHandler>:
int i = 0;
void USART1_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    /*Check the interrupt source*/
    if ((USART1->SR & USART_SR_RXNE)) /*Received a character*/
 800079c:	4b23      	ldr	r3, [pc, #140]	@ (800082c <USART1_IRQHandler+0x94>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d022      	beq.n	80007ee <USART1_IRQHandler+0x56>
    {
        /*Read data*/
        ch = USART1->DR;
 80007a8:	4b20      	ldr	r3, [pc, #128]	@ (800082c <USART1_IRQHandler+0x94>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <USART1_IRQHandler+0x98>)
 80007b0:	701a      	strb	r2, [r3, #0]
        uart_write(ch);
 80007b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <USART1_IRQHandler+0x98>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff feee 	bl	8000598 <uart_write>
        if (ch != '\r')
 80007bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <USART1_IRQHandler+0x98>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b0d      	cmp	r3, #13
 80007c2:	d009      	beq.n	80007d8 <USART1_IRQHandler+0x40>
        {
            command[i++] = ch;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <USART1_IRQHandler+0x9c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	491a      	ldr	r1, [pc, #104]	@ (8000834 <USART1_IRQHandler+0x9c>)
 80007cc:	600a      	str	r2, [r1, #0]
 80007ce:	4a18      	ldr	r2, [pc, #96]	@ (8000830 <USART1_IRQHandler+0x98>)
 80007d0:	7811      	ldrb	r1, [r2, #0]
 80007d2:	4a19      	ldr	r2, [pc, #100]	@ (8000838 <USART1_IRQHandler+0xa0>)
 80007d4:	54d1      	strb	r1, [r2, r3]
 80007d6:	e00a      	b.n	80007ee <USART1_IRQHandler+0x56>
        }
        else
        {
            command[i] = '\0';
 80007d8:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <USART1_IRQHandler+0x9c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a16      	ldr	r2, [pc, #88]	@ (8000838 <USART1_IRQHandler+0xa0>)
 80007de:	2100      	movs	r1, #0
 80007e0:	54d1      	strb	r1, [r2, r3]
            MAIN_SM = 1;
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <USART1_IRQHandler+0xa4>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
            i = 0;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <USART1_IRQHandler+0x9c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
        }
    }
    if ((USART1->SR & USART_SR_TXE))
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <USART1_IRQHandler+0x94>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d015      	beq.n	8000826 <USART1_IRQHandler+0x8e>
    {
        if (*ptr)
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <USART1_IRQHandler+0xa8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00a      	beq.n	800081a <USART1_IRQHandler+0x82>
        {
            USART1->DR = (*ptr & 0xFF);
 8000804:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <USART1_IRQHandler+0xa8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <USART1_IRQHandler+0x94>)
 800080c:	605a      	str	r2, [r3, #4]
            ptr++;
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <USART1_IRQHandler+0xa8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <USART1_IRQHandler+0xa8>)
 8000816:	6013      	str	r3, [r2, #0]
        }
        else
            USART1->CR1 &= ~USART_CR1_TXEIE; // At end of MSG, disable interrupt
    }
}
 8000818:	e005      	b.n	8000826 <USART1_IRQHandler+0x8e>
            USART1->CR1 &= ~USART_CR1_TXEIE; // At end of MSG, disable interrupt
 800081a:	4b04      	ldr	r3, [pc, #16]	@ (800082c <USART1_IRQHandler+0x94>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	4a03      	ldr	r2, [pc, #12]	@ (800082c <USART1_IRQHandler+0x94>)
 8000820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000824:	60d3      	str	r3, [r2, #12]
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40013800 	.word	0x40013800
 8000830:	20000020 	.word	0x20000020
 8000834:	2000003c 	.word	0x2000003c
 8000838:	20000024 	.word	0x20000024
 800083c:	2000002a 	.word	0x2000002a
 8000840:	20000038 	.word	0x20000038

08000844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000844:	480d      	ldr	r0, [pc, #52]	@ (800087c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000846:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000848:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	@ (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	@ (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	@ (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000872:	f000 f811 	bl	8000898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fc97 	bl	80001a8 <main>

0800087a <LoopForever>:

LoopForever:
  b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   r0, =_estack
 800087c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000888:	08000900 	.word	0x08000900
  ldr r2, =_sbss
 800088c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000890:	20000040 	.word	0x20000040

08000894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_2_IRQHandler>
	...

08000898 <__libc_init_array>:
 8000898:	b570      	push	{r4, r5, r6, lr}
 800089a:	2600      	movs	r6, #0
 800089c:	4d0c      	ldr	r5, [pc, #48]	@ (80008d0 <__libc_init_array+0x38>)
 800089e:	4c0d      	ldr	r4, [pc, #52]	@ (80008d4 <__libc_init_array+0x3c>)
 80008a0:	1b64      	subs	r4, r4, r5
 80008a2:	10a4      	asrs	r4, r4, #2
 80008a4:	42a6      	cmp	r6, r4
 80008a6:	d109      	bne.n	80008bc <__libc_init_array+0x24>
 80008a8:	f000 f81a 	bl	80008e0 <_init>
 80008ac:	2600      	movs	r6, #0
 80008ae:	4d0a      	ldr	r5, [pc, #40]	@ (80008d8 <__libc_init_array+0x40>)
 80008b0:	4c0a      	ldr	r4, [pc, #40]	@ (80008dc <__libc_init_array+0x44>)
 80008b2:	1b64      	subs	r4, r4, r5
 80008b4:	10a4      	asrs	r4, r4, #2
 80008b6:	42a6      	cmp	r6, r4
 80008b8:	d105      	bne.n	80008c6 <__libc_init_array+0x2e>
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80008c0:	4798      	blx	r3
 80008c2:	3601      	adds	r6, #1
 80008c4:	e7ee      	b.n	80008a4 <__libc_init_array+0xc>
 80008c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ca:	4798      	blx	r3
 80008cc:	3601      	adds	r6, #1
 80008ce:	e7f2      	b.n	80008b6 <__libc_init_array+0x1e>
 80008d0:	080008f8 	.word	0x080008f8
 80008d4:	080008f8 	.word	0x080008f8
 80008d8:	080008f8 	.word	0x080008f8
 80008dc:	080008fc 	.word	0x080008fc

080008e0 <_init>:
 80008e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e2:	bf00      	nop
 80008e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008e6:	bc08      	pop	{r3}
 80008e8:	469e      	mov	lr, r3
 80008ea:	4770      	bx	lr

080008ec <_fini>:
 80008ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ee:	bf00      	nop
 80008f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f2:	bc08      	pop	{r3}
 80008f4:	469e      	mov	lr, r3
 80008f6:	4770      	bx	lr
